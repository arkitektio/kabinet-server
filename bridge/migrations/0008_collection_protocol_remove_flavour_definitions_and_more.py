# Generated by Django 4.2.9 on 2024-01-22 10:51

from django.db import migrations, models


class Migration(migrations.Migration):
    dependencies = [
        ("bridge", "0007_remove_pod_creator"),
    ]

    operations = [
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "defined_at",
                    models.DateTimeField(auto_created=True, auto_now_add=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of this Collection",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="A description for the Collection"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Protocol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of this Protocol",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="A description for the Protocol"),
                ),
            ],
        ),
        migrations.RemoveField(
            model_name="flavour",
            name="definitions",
        ),
        migrations.AddField(
            model_name="flavour",
            name="inspection",
            field=models.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name="setup",
            name="api_token",
            field=models.CharField(default="Fake Token", max_length=400),
        ),
        migrations.CreateModel(
            name="Definition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "defined_at",
                    models.DateTimeField(auto_created=True, auto_now_add=True),
                ),
                (
                    "definition_version",
                    models.CharField(
                        default="0.0.1",
                        help_text="The version of the Node definition",
                        max_length=1000,
                    ),
                ),
                (
                    "pure",
                    models.BooleanField(
                        default=False,
                        help_text="Is this function pure. e.g can we cache the result?",
                    ),
                ),
                (
                    "idempotent",
                    models.BooleanField(
                        default=False,
                        help_text="Is this function pure. e.g can we cache the result?",
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        help_text="The kind of this Node. e.g. is it a function or a generator?",
                        max_length=1000,
                    ),
                ),
                (
                    "interfaces",
                    models.JSONField(
                        default=list,
                        help_text="Intercae that we use to interpret the meta data",
                    ),
                ),
                (
                    "port_groups",
                    models.JSONField(
                        default=list,
                        help_text="Intercae that we use to interpret the meta data",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The cleartext name of this Node", max_length=1000
                    ),
                ),
                (
                    "meta",
                    models.JSONField(
                        blank=True, help_text="Meta data about this Node", null=True
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="A description for the Node"),
                ),
                (
                    "scope",
                    models.CharField(
                        default="GLOBAL",
                        help_text="The scope of this Node. e.g. does the data it needs or produce live only in the scope of this Node or is it global or does it bridge data?",
                        max_length=1000,
                    ),
                ),
                (
                    "hash",
                    models.CharField(
                        help_text="The hash of the Node (completely unique)",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                (
                    "args",
                    models.JSONField(default=list, help_text="Inputs for this Node"),
                ),
                (
                    "returns",
                    models.JSONField(default=list, help_text="Outputs for this Node"),
                ),
                (
                    "collections",
                    models.ManyToManyField(
                        help_text="The collections this Node belongs to",
                        related_name="nodes",
                        to="bridge.collection",
                    ),
                ),
                (
                    "is_test_for",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The users that have pinned the position",
                        related_name="tests",
                        to="bridge.definition",
                    ),
                ),
                (
                    "protocols",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The protocols this Node implements (e.g. Predicate)",
                        related_name="nodes",
                        to="bridge.protocol",
                    ),
                ),
            ],
        ),
    ]
