# Generated by Django 5.2 on 2025-05-06 13:21

import bridge.fields
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('authentikate', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='App',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=4000)),
            ],
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defined_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('name', models.CharField(help_text='The name of this Collection', max_length=1000, unique=True)),
                ('description', models.TextField(help_text='A description for the Collection')),
            ],
        ),
        migrations.CreateModel(
            name='DockerImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image_string', models.CharField(max_length=4000)),
                ('build_at', models.DateTimeField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Repo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=400)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='S3Store',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('path', bridge.fields.S3Field(blank=True, help_text='The store of the image', max_length=500, null=True, unique=True)),
                ('key', models.CharField(max_length=1000)),
                ('bucket', models.CharField(max_length=1000)),
                ('populated', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Protocol',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='The name of this Protocol', max_length=1000, unique=True)),
                ('description', models.TextField(help_text='A description for the Protocol')),
            ],
        ),
        migrations.CreateModel(
            name='Backend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instance_id', models.CharField(max_length=1000)),
                ('last_heartbeat', models.DateTimeField(auto_now=True)),
                ('kind', models.CharField(default='unknown', max_length=1000)),
                ('name', models.CharField(default='unset', max_length=1000)),
                ('client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='authentikate.client')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Flavour',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=400)),
                ('deployment_id', models.CharField(default=uuid.uuid4, max_length=400, unique=True)),
                ('flavour', models.CharField(default='vanilla', max_length=400)),
                ('selectors', models.JSONField(default=list)),
                ('builder', models.CharField(max_length=400)),
                ('inspection', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('deployed_at', models.DateTimeField(null=True)),
                ('manifest', models.JSONField(default=dict)),
                ('requirements', models.JSONField(default=dict)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flavours', to='bridge.dockerimage')),
                ('repo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flavours', to='bridge.repo')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Deployment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pulled', models.BooleanField(default=False)),
                ('secret_params', models.JSONField(default=dict)),
                ('untyped_params', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('local_id', models.CharField(default='unset', max_length=2000)),
                ('backend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bridge.backend')),
                ('flavour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='deployments', to='bridge.flavour')),
            ],
        ),
        migrations.CreateModel(
            name='GithubRepo',
            fields=[
                ('repo_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bridge.repo')),
                ('repo', models.CharField(max_length=4000)),
                ('user', models.CharField(max_length=4000)),
                ('branch', models.CharField(max_length=4000)),
            ],
            bases=('bridge.repo',),
        ),
        migrations.CreateModel(
            name='MediaStore',
            fields=[
                ('s3store_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='bridge.s3store')),
            ],
            bases=('bridge.s3store',),
        ),
        migrations.CreateModel(
            name='Pod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pod_id', models.CharField(max_length=1000)),
                ('client_id', models.CharField(blank=True, max_length=1000, null=True)),
                ('status', models.CharField(default='PENDING', max_length=1000)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('backend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pods', to='bridge.backend')),
                ('deployment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pods', to='bridge.deployment')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LogDump',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('logs', models.TextField()),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('pod', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log_dumps', to='bridge.pod')),
            ],
        ),
        migrations.CreateModel(
            name='Definition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('defined_at', models.DateTimeField(auto_created=True, auto_now_add=True)),
                ('definition_version', models.CharField(default='0.0.1', help_text='The version of the Action definition', max_length=1000)),
                ('pure', models.BooleanField(default=False, help_text='Is this function pure. e.g can we cache the result?')),
                ('idempotent', models.BooleanField(default=False, help_text='Is this function pure. e.g can we cache the result?')),
                ('kind', models.CharField(help_text='The kind of this Action. e.g. is it a function or a generator?', max_length=1000)),
                ('interfaces', models.JSONField(default=list, help_text='Intercae that we use to interpret the meta data')),
                ('port_groups', models.JSONField(default=list, help_text='Intercae that we use to interpret the meta data')),
                ('name', models.CharField(help_text='The cleartext name of this Action', max_length=1000)),
                ('meta', models.JSONField(blank=True, help_text='Meta data about this Action', null=True)),
                ('description', models.TextField(help_text='A description for the Action')),
                ('scope', models.CharField(default='GLOBAL', help_text='The scope of this Action. e.g. does the data it needs or produce live only in the scope of this Action or is it global or does it bridge data?', max_length=1000)),
                ('hash', models.CharField(help_text='The hash of the Action (completely unique)', max_length=1000, unique=True)),
                ('args', models.JSONField(default=list, help_text='Inputs for this Action')),
                ('returns', models.JSONField(default=list, help_text='Outputs for this Action')),
                ('collections', models.ManyToManyField(help_text='The collections this Action belongs to', related_name='actions', to='bridge.collection')),
                ('is_test_for', models.ManyToManyField(blank=True, help_text='The users that have pinned the position', related_name='tests', to='bridge.definition')),
                ('flavours', models.ManyToManyField(help_text='The flavours this Definition belongs to', related_name='definitions', to='bridge.flavour')),
                ('protocols', models.ManyToManyField(blank=True, help_text='The protocols this Action implements (e.g. Predicate)', related_name='actions', to='bridge.protocol')),
            ],
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version', models.CharField(max_length=400)),
                ('scopes', models.JSONField(default=list)),
                ('original_logo', models.CharField(blank=True, help_text='The original logo url', max_length=1000, null=True)),
                ('entrypoint', models.CharField(default='app', max_length=4000)),
                ('app', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='releases', to='bridge.app')),
                ('logo', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='releases', to='bridge.mediastore')),
            ],
        ),
        migrations.AddField(
            model_name='flavour',
            name='release',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='flavours', to='bridge.release'),
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_id', models.CharField(max_length=1000)),
                ('name', models.CharField(default='unset', max_length=1000)),
                ('qualifiers', models.JSONField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now=True)),
                ('backend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='bridge.backend')),
            ],
        ),
        migrations.AddField(
            model_name='pod',
            name='resource',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pods', to='bridge.resource'),
        ),
        migrations.AddConstraint(
            model_name='flavour',
            constraint=models.UniqueConstraint(fields=('release', 'name'), name='Unique flavour for release'),
        ),
        migrations.AddConstraint(
            model_name='resource',
            constraint=models.UniqueConstraint(fields=('backend', 'resource_id'), name='Unique resource for backend '),
        ),
        migrations.AddConstraint(
            model_name='pod',
            constraint=models.UniqueConstraint(fields=('backend', 'pod_id'), name='Unique pod for backend '),
        ),
        migrations.AddConstraint(
            model_name='release',
            constraint=models.UniqueConstraint(fields=('app', 'version'), name='Unique release for version'),
        ),
    ]
