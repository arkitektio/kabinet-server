# Generated by Django 4.2.9 on 2024-01-26 12:43

import bridge.storages
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("authentikate", "0002_alter_user_unique_together_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="App",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("identifier", models.CharField(max_length=4000)),
            ],
        ),
        migrations.CreateModel(
            name="Backend",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("instance_id", models.CharField(max_length=1000)),
                ("last_heartbeat", models.DateTimeField(auto_now=True)),
                (
                    "client",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="authentikate.app",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Collection",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "defined_at",
                    models.DateTimeField(auto_created=True, auto_now_add=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of this Collection",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="A description for the Collection"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Deployment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pulled", models.BooleanField(default=False)),
                ("api_token", models.CharField(max_length=1000)),
                ("created_at", models.DateTimeField(auto_now=True)),
                (
                    "backend",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="bridge.backend"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Protocol",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name of this Protocol",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="A description for the Protocol"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Repo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                ("created_at", models.DateTimeField(auto_now=True)),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="GithubRepo",
            fields=[
                (
                    "repo_ptr",
                    models.OneToOneField(
                        auto_created=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        parent_link=True,
                        primary_key=True,
                        serialize=False,
                        to="bridge.repo",
                    ),
                ),
                ("repo", models.CharField(max_length=4000)),
                ("user", models.CharField(max_length=4000)),
                ("branch", models.CharField(max_length=4000)),
            ],
            bases=("bridge.repo",),
        ),
        migrations.CreateModel(
            name="Release",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("version", models.CharField(max_length=400)),
                ("scopes", models.JSONField(default=list)),
                (
                    "logo",
                    models.ImageField(
                        blank=True,
                        max_length=1000,
                        null=True,
                        storage=bridge.storages.PrivateMediaStorage(),
                        upload_to="",
                    ),
                ),
                (
                    "original_logo",
                    models.CharField(
                        blank=True,
                        help_text="The original logo url",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("entrypoint", models.CharField(default="app", max_length=4000)),
                (
                    "app",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="releases",
                        to="bridge.app",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Pod",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pod_id", models.CharField(max_length=1000)),
                ("backend", models.CharField(max_length=2000)),
                ("status", models.CharField(default="pending", max_length=1000)),
                ("created_at", models.DateTimeField(auto_now=True)),
                (
                    "deployment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="pods",
                        to="bridge.deployment",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="LogDump",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("logs", models.TextField()),
                ("created_at", models.DateTimeField(auto_now=True)),
                (
                    "pod",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="log_dumps",
                        to="bridge.pod",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Flavour",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=400)),
                (
                    "deployment_id",
                    models.CharField(default=uuid.uuid4, max_length=400, unique=True),
                ),
                ("build_id", models.CharField(default=uuid.uuid4, max_length=400)),
                ("flavour", models.CharField(default="vanilla", max_length=400)),
                ("selectors", models.JSONField(default=list)),
                (
                    "image",
                    models.CharField(default="jhnnsrs/fake:latest", max_length=400),
                ),
                ("builder", models.CharField(max_length=400)),
                ("inspection", models.JSONField(default=dict)),
                ("created_at", models.DateTimeField(auto_now=True)),
                ("deployed_at", models.DateTimeField(null=True)),
                (
                    "release",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flavours",
                        to="bridge.release",
                    ),
                ),
                (
                    "repo",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="flavours",
                        to="bridge.repo",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="deployment",
            name="flavour",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="deployments",
                to="bridge.flavour",
            ),
        ),
        migrations.CreateModel(
            name="Definition",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "defined_at",
                    models.DateTimeField(auto_created=True, auto_now_add=True),
                ),
                (
                    "definition_version",
                    models.CharField(
                        default="0.0.1",
                        help_text="The version of the Node definition",
                        max_length=1000,
                    ),
                ),
                (
                    "pure",
                    models.BooleanField(
                        default=False,
                        help_text="Is this function pure. e.g can we cache the result?",
                    ),
                ),
                (
                    "idempotent",
                    models.BooleanField(
                        default=False,
                        help_text="Is this function pure. e.g can we cache the result?",
                    ),
                ),
                (
                    "kind",
                    models.CharField(
                        help_text="The kind of this Node. e.g. is it a function or a generator?",
                        max_length=1000,
                    ),
                ),
                (
                    "interfaces",
                    models.JSONField(
                        default=list,
                        help_text="Intercae that we use to interpret the meta data",
                    ),
                ),
                (
                    "port_groups",
                    models.JSONField(
                        default=list,
                        help_text="Intercae that we use to interpret the meta data",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The cleartext name of this Node", max_length=1000
                    ),
                ),
                (
                    "meta",
                    models.JSONField(
                        blank=True, help_text="Meta data about this Node", null=True
                    ),
                ),
                (
                    "description",
                    models.TextField(help_text="A description for the Node"),
                ),
                (
                    "scope",
                    models.CharField(
                        default="GLOBAL",
                        help_text="The scope of this Node. e.g. does the data it needs or produce live only in the scope of this Node or is it global or does it bridge data?",
                        max_length=1000,
                    ),
                ),
                (
                    "hash",
                    models.CharField(
                        help_text="The hash of the Node (completely unique)",
                        max_length=1000,
                        unique=True,
                    ),
                ),
                (
                    "args",
                    models.JSONField(default=list, help_text="Inputs for this Node"),
                ),
                (
                    "returns",
                    models.JSONField(default=list, help_text="Outputs for this Node"),
                ),
                (
                    "collections",
                    models.ManyToManyField(
                        help_text="The collections this Node belongs to",
                        related_name="nodes",
                        to="bridge.collection",
                    ),
                ),
                (
                    "flavours",
                    models.ManyToManyField(
                        help_text="The flavours this Definition belongs to",
                        related_name="definitions",
                        to="bridge.flavour",
                    ),
                ),
                (
                    "is_test_for",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The users that have pinned the position",
                        related_name="tests",
                        to="bridge.definition",
                    ),
                ),
                (
                    "protocols",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The protocols this Node implements (e.g. Predicate)",
                        related_name="nodes",
                        to="bridge.protocol",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="release",
            constraint=models.UniqueConstraint(
                fields=("app", "version"), name="Unique release for version"
            ),
        ),
        migrations.AddConstraint(
            model_name="pod",
            constraint=models.UniqueConstraint(
                fields=("backend", "pod_id"), name="Unique pod for backend "
            ),
        ),
        migrations.AddConstraint(
            model_name="flavour",
            constraint=models.UniqueConstraint(
                fields=("release", "name"), name="Unique flavour for release"
            ),
        ),
    ]
